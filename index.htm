<!DOCTYPE html>
<html lang="ru" data-theme="dark">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>–ò–ò-–¶—ã–ø–ª—ë–Ω–æ–∫ ‚Äì –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º</title>

<!-- W3.CSS (–¥–ª—è –±–∞–∑–æ–≤–æ–π —Å–µ—Ç–∫–∏) -->
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

<style>
  :root{
    --size:192;
    --bg:#0e1217;
    --card:rgba(20,26,34,.75);
    --text:#eaeef5;
    --muted:#9aa5c1;
    --accent:#4da3ff;
    --accent2:#7ae0ff;
    --radius:14px;
    --shadow:0 16px 40px rgba(0,0,0,.35);
    --ring:0 0 0 3px rgba(77,163,255,.35);
  }
  [data-theme="neon"]{
    --bg:#0a0612; --card:rgba(18,10,30,.75); --text:#f2e9ff; --muted:#d1c4e9;
    --accent:#b26bff; --accent2:#5ef1ff;
  }
  [data-theme="emerald"]{
    --bg:#07130f; --card:rgba(10,22,18,.75); --text:#e9fff6; --muted:#bce3d6;
    --accent:#1fd899; --accent2:#76ffd1;
  }
  [data-theme="solar"]{
    --bg:#0f0f0a; --card:rgba(28,26,18,.75); --text:#fff6db; --muted:#e6dab0;
    --accent:#ffb84d; --accent2:#ffd37a;
  }

  *{box-sizing:border-box;}
  body{
    margin:0;
    background:var(--bg);
    color:var(--text);
    font-family: system-ui,-apple-system,BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
    min-height:100vh;
  }
  .app{max-width:1160px;margin:0 auto;padding:16px;display:grid;gap:20px;}
  .topbar{
    display:flex;
    flex-wrap:wrap;
    gap:12px;
    align-items:center;
    justify-content:space-between;
    padding:12px 16px;
    background:rgba(255,255,255,.03);
    border-radius:12px;
    margin-bottom:8px;
    position:sticky;
    top:0;
    z-index:5;
    backdrop-filter:blur(6px);
  }
  .brand{display:flex;gap:10px;align-items:center;}
  .logo{
    width:38px; height:38px;
    border-radius:50%;
    background:linear-gradient(135deg,var(--accent),var(--accent2));
    display:grid; place-items:center;
    font-size:20px;
    font-weight:700;
    color:#0e1217;
    box-shadow: var(--shadow);
  }
  .title{font-size:1.1rem;font-weight:700;margin:0;line-height:1;}
  .subtitle{font-size:.75rem;color:var(--muted);margin:0;}

  .theme-picker{display:flex;gap:8px;align-items:center;}
  .theme-dot{
    width:26px;height:26px;border-radius:50%;border:2px solid rgba(255,255,255,.15);cursor:pointer;
    position:relative;
  }
  .t-dark{background:linear-gradient(135deg,#1f2739,#0f1217);}
  .t-neon{background:linear-gradient(135deg,#b26bff,#5ef1ff);}
  .t-emerald{background:linear-gradient(135deg,#1fd899,#76ffd1);}
  .t-solar{background:linear-gradient(135deg,#ffb84d,#ffd37a);}

  .grid{display:grid;grid-template-columns:340px 1fr;gap:18px;}
  @media (max-width: 950px){ .grid{ grid-template-columns:1fr; } }

  .card{
    background: var(--card);
    border-radius: var(--radius);
    padding:16px;
    position:relative;
    box-shadow: var(--shadow);
    display:flex;
    flex-direction:column;
    gap:12px;
  }
  .canvas-wrapper{
    display:flex;
    justify-content:center;
    margin-bottom:6px;
  }
  canvas{
    width:calc(var(--size)*1px);
    height:calc(var(--size)*1px);
    border-radius:12px;
    background:#0b0f15;
    image-rendering:pixelated;
    box-shadow:0 20px 50px rgba(0,0,0,.5);
  }

  .progress-group{display:grid;gap:6px;margin-top:6px;}
  .progress-row{display:grid; grid-template-columns:80px 1fr 40px; gap:8px; align-items:center;}
  .label{font-size:12px;color:var(--muted);}
  .bar{
    position:relative;
    height:10px;
    border-radius:8px;
    background:rgba(255,255,255,.06);
    overflow:hidden;
    border:1px solid rgba(255,255,255,.1);
  }
  .bar>i{
    display:block;
    height:100%;
    width:0%;
    background:linear-gradient(90deg,var(--accent),var(--accent2));
    transition:width .2s ease-out;
  }
  .pct{font-size:11px;text-align:right;color:var(--muted);}

  .controls{display:flex;gap:8px;flex-wrap:wrap;justify-content:center;margin-top:6px;}
  .btn{padding:8px 12px;border:none;border-radius:10px;cursor:pointer;font-weight:600;display:inline-flex;align-items:center;gap:6px; background:linear-gradient(135deg,rgba(255,255,255,.07),rgba(255,255,255,.02));color:var(--text);}
  .btn.active{box-shadow: var(--ring);}
  .status{font-size:12px;margin-top:4px;color:var(--muted);}

  .chat{display:flex;flex-direction:column;gap:12px;}
  .log{flex:1;overflow:auto;border:1px solid rgba(255,255,255,.08);border-radius:12px;padding:10px;background:rgba(255,255,255,.02);}
  .bubble{display:inline-block;max-width:80%;padding:10px 14px;border-radius:16px;margin:6px 0;position:relative;font-size:14px;line-height:1.3;word-break:break-word;}
  .me{margin-left:auto;background:rgba(255,255,255,.10);color:#000;}
  .ai{margin-right:auto;background:rgba(255,255,255,.03);}
  .input-row{display:grid;grid-template-columns:1fr 140px;gap:10px;margin-top:4px;}
  input[type="text"]{padding:12px 14px;border-radius:12px;border:1px solid rgba(255,255,255,.15);background:rgba(0,0,0,.25);color:var(--text);font-size:14px;outline:none; width:100%;}
  input:focus{box-shadow: var(--ring);}
  .send-btn{background:var(--accent);border:none;color:#0e1217;font-weight:700;border-radius:12px;cursor:pointer;padding:12px;}
  .small{font-size:11px;color:var(--muted);margin-top:4px;}
  details{margin-top:8px;}
  summary{cursor:pointer;font-size:12px;color:var(--muted);}
</style>
</head>
<body>

<div class="topbar">
  <div class="brand">
    <div class="logo">üê£</div>
    <div style="display:flex;flex-direction:column;">
      <div class="title">–ò–ò-–¶—ã–ø–ª—ë–Ω–æ–∫</div>
      <div class="subtitle">–õ–æ–∫–∞–ª—å–Ω–æ —Å transformers.js ¬∑ RU ‚áÑ EN</div>
    </div>
  </div>
  <div class="theme-picker">
    <div class="subtitle" style="margin-right:6px;">–¢–µ–º–∞:</div>
    <div class="theme-dot t-dark" title="Dark" data-theme="dark"></div>
    <div class="theme-dot t-neon" title="Neon" data-theme="neon"></div>
    <div class="theme-dot t-emerald" title="Emerald" data-theme="emerald"></div>
    <div class="theme-dot t-solar" title="Solar" data-theme="solar"></div>
  </div>
</div>

<div class="app">
  <div class="grid">
    <!-- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: —Ü—ã–ø–ª—ë–Ω–æ–∫ + –∑–∞–≥—Ä—É–∑–∫–∞ + —ç–º–æ—Ü–∏–∏ -->
    <div class="card">
      <div class="canvas-wrapper">
        <canvas id="chick" width="192" height="192" aria-label="–∞–Ω–∏–º–∞—Ü–∏—è —Ü—ã–ø–ª—ë–Ω–∫–∞"></canvas>
      </div>

      <div>
        <div class="status" id="load-status">–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π‚Ä¶</div>
        <div class="progress-group">
          <div class="progress-row">
            <div class="label">ru‚Üíen</div>
            <div class="bar"><i id="pb-ruen"></i></div>
            <div class="pct" id="pct-ruen">0%</div>
          </div>
          <div class="progress-row">
            <div class="label">LLM</div>
            <div class="bar"><i id="pb-gen"></i></div>
            <div class="pct" id="pct-gen">0%</div>
          </div>
          <div class="progress-row">
            <div class="label">en‚Üíru</div>
            <div class="bar"><i id="pb-enru"></i></div>
            <div class="pct" id="pct-enru">0%</div>
          </div>
          <div class="progress-row">
            <div class="label">Sentiment</div>
            <div class="bar"><i id="pb-sent"></i></div>
            <div class="pct" id="pct-sent">0%</div>
          </div>
        </div>
        <div class="small">–ú–æ–¥–µ–ª–∏ –∫–µ—à–∏—Ä—É—é—Ç—Å—è; –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–∏—Å, —á–µ—Ä–µ–∑ 3 —Å–µ–∫ –æ–Ω –¥–æ–≤–µ–¥—ë—Ç—Å—è –¥–æ 100%.</div>
        <details>
          <summary>–û—à–∏–±–∫–∏ (debug)</summary>
          <pre id="errors" style="background:rgba(0,0,0,.2);padding:8px;border-radius:8px;overflow:auto;max-height:160px;"></pre>
        </details>
      </div>

      <div class="controls">
        <button class="btn" data-act="idle">–°–ø–æ–∫–æ–π–Ω—ã–π</button>
        <button class="btn" data-act="happy">–†–∞–¥</button>
        <button class="btn" data-act="angry">–ó–ª–∏—Ç—Å—è</button>
        <button class="btn" data-act="talk">–ì–æ–≤–æ—Ä–∏—Ç</button>
      </div>
      <div class="status" id="status">–ì–æ—Ç–æ–≤–ª—é—Å—å...</div>
    </div>

    <!-- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: —á–∞—Ç -->
    <div class="card">
      <div class="chat">
        <div id="log" class="log"></div>
        <form id="chat-form">
          <div class="input-row">
            <input id="q" type="text" placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —Ü—ã–ø–ª—ë–Ω–∫–∞ –ø–æ-—Ä—É—Å—Å–∫–∏‚Ä¶" autocomplete="off"/>
            <button id="send" type="submit" class="send-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
          </div>
        </form>
        <div class="small">–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–¥–µ–ª–∏: Xenova/opus-mt-ru-en, Xenova/distilgpt2, Xenova/opus-mt-en-ru, Xenova/distilbert-base-uncased-finetuned-sst-2-english.</div>
      </div>
    </div>
  </div>
</div>

<script type="module">
/* === —Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è === */
document.querySelectorAll('.theme-dot').forEach(el=>{
  el.addEventListener('click', ()=> {
    const t = el.dataset.theme;
    document.documentElement.setAttribute('data-theme', t);
    localStorage.setItem('chick_theme', t);
  });
});
const savedTheme = localStorage.getItem('chick_theme');
if (savedTheme) document.documentElement.setAttribute('data-theme', savedTheme);

/* === –∏–º–ø–æ—Ä—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ === */
import { pipeline, env } from "./transformers.min.js";

/* === –∫–æ–Ω—Ñ–∏–≥ === */
env.allowRemoteModels = true;
env.backends.onnx.wasm.wasmPaths = "./";

/* === —Å–ø—Ä–∞–π—Ç –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ === */
const SPRITE_SRC = "chick_4x4.png"; // –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Å–ø—Ä–∞–π—Ç
const COLS = 4;
const FRAME = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--size'))||192;
const animations = { idle:[0,1,2,3], talk:[4,5,6,7], happy:[8,9,10,11], angry:[12,13,14,15] };

const canvas = document.getElementById('chick');
const ctx = canvas.getContext('2d');

function drawFallback(){
  ctx.save();
  ctx.clearRect(0,0,FRAME,FRAME);
  ctx.fillStyle="rgba(255,255,255,0.06)";
  ctx.fillRect(0,0,FRAME,FRAME);
  ctx.translate(FRAME/2, FRAME/2);
  ctx.fillStyle="#79d27d";
  ctx.beginPath();
  ctx.arc(0,20,60,0,Math.PI*2); ctx.fill(); // —Ç–µ–ª–æ
  ctx.fillStyle="#ffe08a";
  ctx.beginPath();
  ctx.moveTo(0,-10);
  ctx.lineTo(40,5);
  ctx.lineTo(0,20);
  ctx.closePath(); ctx.fill(); // –∫–ª—é–≤
  ctx.fillStyle="#111";
  ctx.beginPath();
  ctx.arc(-20,0,10,0,Math.PI*2); ctx.arc(20,0,10,0,Math.PI*2); ctx.fill(); // –≥–ª–∞–∑–∞
  ctx.restore();
}
drawFallback();

/* === –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –æ—à–∏–±–∫–∏ === */
const errorsEl = document.getElementById('errors');
function logErr(e){ errorsEl.textContent += (e?.stack||e?.message||String(e)) + "\n"; console.error(e); }
window.addEventListener('error', ev => logErr(ev.error || ev.message));
window.addEventListener('unhandledrejection', ev => logErr(ev.reason || ev));

const pctEls = {
  ruen: document.getElementById('pct-ruen'),
  gen: document.getElementById('pct-gen'),
  enru: document.getElementById('pct-enru'),
  sent: document.getElementById('pct-sent')
};
const barEls = {
  ruen: document.getElementById('pb-ruen'),
  gen: document.getElementById('pb-gen'),
  enru: document.getElementById('pb-enru'),
  sent: document.getElementById('pb-sent')
};
function setProgress(key, value){
  const pct = Math.min(100, Math.max(0, Math.round(value)));
  if (barEls[key]) barEls[key].style.width = pct + "%";
  if (pctEls[key]) pctEls[key].textContent = pct + "%";
}

/* === –º–æ–¥–µ–ª–∏ === */
const statusEl = document.getElementById('status');
const loadStatus = document.getElementById('load-status');
let translateRUEN, generator, translateENRU, sentiment;

async function loadPipelines(){
  try{
    loadStatus.textContent="–ó–∞–≥—Ä—É–∑–∫–∞ ru‚Üíen...";
    setProgress('ruen', 5);
    translateRUEN = await pipeline("translation","Xenova/opus-mt-ru-en", { progress_callback: p=> {
      if (p.total) setProgress('ruen', p.loaded / p.total * 100);
      else if (p.progress) setProgress('ruen', p.progress*100);
    }});
    setProgress('ruen',100);

    loadStatus.textContent="–ó–∞–≥—Ä—É–∑–∫–∞ LLM...";
    setProgress('gen',5);
    generator = await pipeline("text-generation","Xenova/distilgpt2", { progress_callback: p=>{
      if (p.total) setProgress('gen', p.loaded / p.total * 100);
      else if (p.progress) setProgress('gen', p.progress*100);
    }});
    setProgress('gen',100);

    loadStatus.textContent="–ó–∞–≥—Ä—É–∑–∫–∞ en‚Üíru...";
    setProgress('enru',5);
    translateENRU = await pipeline("translation","Xenova/opus-mt-en-ru", { progress_callback: p=>{
      if (p.total) setProgress('enru', p.loaded / p.total * 100);
      else if (p.progress) setProgress('enru', p.progress*100);
    }});
    setProgress('enru',100);

    loadStatus.textContent="–ó–∞–≥—Ä—É–∑–∫–∞ sentiment...";
    setProgress('sent',5);
    try{
      sentiment = await pipeline("sentiment-analysis","Xenova/distilbert-base-uncased-finetuned-sst-2-english", { progress_callback: p=>{
        if (p.total) setProgress('sent', p.loaded / p.total * 100);
        else if (p.progress) setProgress('sent', p.progress*100);
      }});
    } catch(e){
      logErr(e);
      sentiment = null;
    }
    setProgress('sent',100);

    loadStatus.textContent="–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å.";
    statusEl.textContent="–ì–æ—Ç–æ–≤! üê£";
  } catch(e){
    logErr(e);
    loadStatus.textContent="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π"; 
    statusEl.textContent="–û—à–∏–±–∫–∞";
    // –¥–æ–±–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–∑—É–∞–ª—å–Ω–æ
    setTimeout(()=>{
      setProgress('ruen',100);
      setProgress('gen',100);
      setProgress('enru',100);
      setProgress('sent',100);
    }, 1000);
  }
}
await loadPipelines();

/* === –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–∞ === */
const img = new Image();
img.src = SPRITE_SRC;
img.addEventListener('error', ()=> logErr("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–π—Ç: " + SPRITE_SRC));
await img.decode().catch(()=>{/* fallback */});

/* === –∞–Ω–∏–º–∞—Ü–∏—è === */
let state="idle", frameIdx=0, last=0, fps=8;
function drawFrame(i){
  const sx = (i % COLS) * FRAME;
  const sy = Math.floor(i / COLS) * FRAME;
  ctx.clearRect(0,0,FRAME,FRAME);
  if (img.complete && img.naturalWidth){
    ctx.drawImage(img, sx, sy, FRAME, FRAME, 0, 0, FRAME, FRAME);
  } else {
    drawFallback();
  }
}
function loop(ts){
  const seq = animations[state] || animations.idle;
  if (ts - last > 1000 / fps){
    frameIdx = (frameIdx + 1) % seq.length;
    drawFrame(seq[frameIdx]);
    last = ts;
  }
  requestAnimationFrame(loop);
}
drawFrame(animations[state][0]);
requestAnimationFrame(loop);

/* === –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç === */
const GEN_STRICT = { do_sample:false, num_beams:4, max_new_tokens:64, no_repeat_ngram_size:3, repetition_penalty:1.2 };
const GEN_CREATIVE = { do_sample:true, temperature:0.7, top_p:0.9, top_k:50, max_new_tokens:64, no_repeat_ngram_size:3, repetition_penalty:1.1 };

function takeFirstSentence(text){
  const m = String(text).match(/[^.!?‚Ä¶]+[.!?‚Ä¶]/);
  return (m ? m[0] : text).trim();
}
function cleanEN(s){
  return String(s).replace(/\s+/g," ").replace(/([.!?])\1+/g,"$1").replace(/[‚Äú‚Äù]+/g,'"').trim();
}
function looksBad(s){
  if(!s || s.length < 4) return true;
  if(/(.)\1{3,}/i.test(s)) return true;
  if(/^<\/?[^>]+>/.test(s)) return true;
  return false;
}
async function generateENAnswer(enPrompt){
  const fewshot = [
    {q:"Hi! Who are you?", a:"I am Cheepy, a tiny zombie chick who loves to peep and learn."},
    {q:"Give advice for a bad mood.", a:"Take a deep breath, stretch your wings, and do one small kind thing for yourself."},
  ];
  const examples = fewshot.map(x=>`Human: ${x.q}\nCheepy: ${x.a}`).join("\n");
  const persona = "You are Cheepy, a cute, kind, helpful cartoon zombie chick. Answer in one short, clear sentence.";
  const base = `${persona}\n${examples}\nHuman: ${enPrompt}\nCheepy:`;

  let out = await generator(base, GEN_STRICT).catch(()=>null);
  let text = out?.[0]?.generated_text?.replace(base,"")?.trim() || "";
  text = cleanEN(text);
  if (looksBad(text)){
    out = await generator(base, GEN_CREATIVE).catch(()=>null);
    text = cleanEN(out?.[0]?.generated_text?.replace(base,"")?.trim() || "");
  }
  return takeFirstSentence(text);
}

/* === —á–∞—Ç === */
const logEl = document.getElementById('log');
const qEl = document.getElementById('q');
const sendBtn = document.getElementById('send');

function addMsg(text, who='ai'){
  const b = document.createElement('div');
  b.className = 'bubble ' + (who==='me' ? 'me' : 'ai');
  b.textContent = text;
  logEl.appendChild(b);
  logEl.scrollTop = logEl.scrollHeight;
}

document.getElementById('chat-form').addEventListener('submit', e=>{
  e.preventDefault();
  const txt = qEl.value.trim();
  if(!txt) return;
  qEl.value="";
  reply(txt);
});

document.querySelectorAll('[data-act]').forEach(btn=>{
  btn.addEventListener('click', ()=> {
    document.querySelectorAll('.btn').forEach(b=>b.classList.remove('active'));
    btn.classList.add('active');
    state = btn.dataset.act;
  });
});

async function reply(userText){
  try{
    state="talk";
    sendBtn.disabled=true;
    addMsg(userText,'me');

    // RU -> EN
    let enPrompt = userText;
    try{ enPrompt = (await translateRUEN(userText))?.[0]?.translation_text || enPrompt; } catch(e){ logErr(e); }

    // Sentiment
    let mood="NEUTRAL";
    try{ if (sentiment){ const s = await sentiment(enPrompt); mood = s?.[0]?.label || 'NEUTRAL'; } } catch(e){ logErr(e); }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    let enAnswer = await generateENAnswer(enPrompt);
    if (looksBad(enAnswer)) enAnswer = "I flap my tiny wings and try to help.";

    // EN -> RU
    let ruAnswer = enAnswer;
    try{ ruAnswer = (await translateENRU(enAnswer))?.[0]?.translation_text || ruAnswer; } catch(e){ logErr(e); }
    ruAnswer = takeFirstSentence(ruAnswer);

    state = (mood === "POSITIVE") ? "happy" : (mood === "NEGATIVE") ? "angry" : "idle";
    addMsg("üê£ " + ruAnswer,'ai');
    statusEl.textContent="–ì–æ—Ç–æ–≤!";
  } catch(e){
    logErr(e);
    statusEl.textContent="–û—à–∏–±–∫–∞";
  } finally{
    sendBtn.disabled=false;
  }
}
</script>
</body>
</html>
