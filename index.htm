<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>–†—É—Å—Å–∫–∏–π –ò–ò-–¶—ã–ø–ª—ë–Ω–æ–∫ (–ª–æ–∫–∞–ª—å–Ω—ã–π transformers.js)</title>
<style>
  :root { --size: 192; }
  body{margin:0;background:#0f1115;color:#e8e8ea;font-family:system-ui,Segoe UI,Arial}
  .layout{max-width:980px;margin:0 auto;padding:16px;display:grid;gap:16px;grid-template-columns:260px 1fr}
  .card{background:#161a22;border:1px solid #252a35;border-radius:14px;padding:12px}
  #stage{display:flex;flex-direction:column;align-items:center;gap:10px}
  canvas{width:calc(var(--size)*1px);height:calc(var(--size)*1px);background:#0b0e14;border-radius:10px;image-rendering:pixelated}
  .btns{display:flex;gap:8px;flex-wrap:wrap}
  button{background:#232a36;border:1px solid #313a49;color:#e8e8ea;border-radius:10px;padding:8px 10px;cursor:pointer}
  button:disabled{opacity:.6;cursor:progress}
  #log{height:360px;overflow:auto;display:flex;flex-direction:column;gap:8px}
  .msg{background:#1b2130;border:1px solid #293247;padding:8px 10px;border-radius:10px}
  .me{align-self:flex-end;background:#17324d;border-color:#1e415f}
  form{display:flex;gap:8px}
  input[type="text"]{flex:1;padding:10px;border-radius:10px;border:1px solid #2a3241;background:#121722;color:#e8e8ea}
  small{opacity:.75}
  #loader{display:flex;flex-direction:column;gap:10px;width:100%}
  .row{display:grid;grid-template-columns:92px 1fr 48px;gap:8px;align-items:center}
  .name{font-size:14px;opacity:.85}
  .bar{height:10px;background:#0e1320;border-radius:8px;overflow:hidden;border:1px solid #2a3241}
  .bar>i{display:block;height:100%;width:0%;background:linear-gradient(90deg,#3d7bfd,#7aa2ff)}
  .pct{font-variant-numeric:tabular-nums;text-align:right}
  .hide{display:none!important}
  #errors{white-space:pre-wrap;background:#1e1e1e;border:1px solid #333;border-radius:10px;padding:8px;max-height:160px;overflow:auto}
</style>
</head>
<body>
<div class="layout">
  <div class="card" id="stage">
    <canvas id="chick" width="192" height="192" aria-label="–∞–Ω–∏–º–∞—Ü–∏—è —Ü—ã–ø–ª—ë–Ω–∫–∞"></canvas>

    <div id="loader" class="card" role="status" aria-live="polite">
      <div class="row"><span class="name">ru‚Üíen</span><div class="bar"><i id="pb-ruen"></i></div><span class="pct" id="tx-ruen">0%</span></div>
      <div class="row"><span class="name">LLM</span><div class="bar"><i id="pb-gen"></i></div><span class="pct" id="tx-gen">0%</span></div>
      <div class="row"><span class="name">en‚Üíru</span><div class="bar"><i id="pb-enru"></i></div><span class="pct" id="tx-enru">0%</span></div>
      <div class="row"><span class="name">Sentiment</span><div class="bar"><i id="pb-sent"></i></div><span class="pct" id="tx-sent">0%</span></div>
      <small id="load-note">–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π‚Ä¶ (–∫–µ—à–∏—Ä—É—é—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ)</small>
      <div><small>–û—à–∏–±–∫–∏:</small><pre id="errors"></pre></div>
    </div>

    <div class="btns" aria-label="—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏—è–º–∏">
      <button type="button" data-act="idle">–°–ø–æ–∫–æ–π–Ω—ã–π</button>
      <button type="button" data-act="happy">–†–∞–¥</button>
      <button type="button" data-act="angry">–ó–ª–∏—Ç—Å—è</button>
      <button type="button" data-act="talk">–ì–æ–≤–æ—Ä–∏—Ç</button>
    </div>
    <small id="status">–ì–æ—Ç–æ–≤–ª—é—Å—å‚Ä¶</small>
  </div>

  <div class="card">
    <div id="log" aria-live="polite"></div>
    <form id="chat">
      <input id="q" type="text" placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —Ü—ã–ø–ª—ë–Ω–∫–∞ –ø–æ-—Ä—É—Å—Å–∫–∏‚Ä¶" autocomplete="off"/>
      <button id="send" type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
    <small>–ú–æ–¥–µ–ª–∏: <code>Xenova/opus-mt-ru-en</code>, <code>Xenova/distilgpt2</code>, <code>Xenova/opus-mt-en-ru</code>, <code>Xenova/distilbert-base-uncased-finetuned-sst-2-english</code>. –í—Å—ë –≤ –±—Ä–∞—É–∑–µ—Ä–µ.</small>
  </div>
</div>

<script type="module">
/*
  –í–ê–ñ–ù–û:
  1) transformers.min.js –∏ —Ñ–∞–π–ª—ã ort-wasm*.wasm/ort-wasm-worker.js –ª–µ–∂–∞—Ç –†–Ø–î–û–ú —Å —ç—Ç–∏–º HTML.
  2) –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ http-—Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: python -m http.server 8000).
*/
import { pipeline, env } from "./transformers.min.js";

/* ===== –ü–£–¢–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò ===== */
env.allowRemoteModels = true;     // –º–æ–¥–µ–ª–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ CDN
env.backends.onnx.wasm.wasmPaths = "./"; // wasm-—Ñ–∞–π–ª—ã –ª–µ–∂–∞—Ç —Ä—è–¥–æ–º —Å HTML

/* ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—Ä–∞–π—Ç–∞ ===== */
const SPRITE_SRC = "chick_4x4.png"; // <-- –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à –ø—É—Ç—å –∫ —Å–ø—Ä–∞–π—Ç—É 4√ó4
const COLS = 4, FRAME = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--size'))||192;
const animations = { idle:[0,1,2,3], talk:[4,5,6,7], happy:[8,9,10,11], angry:[12,13,14,15] };

/* ===== –ö–∞–Ω–≤–∞—Å –∏ fallback ===== */
const canvas = document.getElementById('chick');
const ctx = canvas.getContext('2d');
function drawFallback() {
  const s = FRAME;
  ctx.clearRect(0,0,s,s);
  ctx.fillStyle = "#1a2233"; ctx.fillRect(0,0,s,s);
  ctx.translate(s/2, s/2);
  ctx.fillStyle="#79d27d"; ctx.beginPath(); ctx.arc(0,20,60,0,Math.PI*2); ctx.fill(); // —Ç–µ–ª–æ
  ctx.fillStyle="#ffe08a"; ctx.beginPath(); ctx.moveTo(0,-10); ctx.lineTo(40,5); ctx.lineTo(0,20); ctx.closePath(); ctx.fill(); // –∫–ª—é–≤
  ctx.fillStyle="#111"; ctx.beginPath(); ctx.arc(-20,0,10,0,Math.PI*2); ctx.arc(20,0,10,0,Math.PI*2); ctx.fill(); // –≥–ª–∞–∑–∞
  ctx.setTransform(1,0,0,1,0,0);
}
drawFallback();

/* ===== –õ–æ–≥ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ===== */
const ERR = document.getElementById('errors');
function logErr(e){ ERR.textContent += (e?.stack || e?.message || e) + "\n"; console.error(e); }
window.addEventListener('error', ev => logErr(ev.error || ev.message));
window.addEventListener('unhandledrejection', ev => logErr(ev.reason || ev));

const P = id => ({ bar:document.getElementById("pb-"+id), txt:document.getElementById("tx-"+id) });
const pb = { ruen:P("ruen"), gen:P("gen"), enru:P("enru"), sent:P("sent") };
function onProgress(which){
  const h = pb[which];
  return (p)=>{
    const pct = p.total? Math.min(100, Math.round(100*p.loaded/p.total))
                        : (p.progress? Math.round(100*p.progress) : 0);
    if (h.bar) h.bar.style.width = (pct||0) + "%";
    if (h.txt) h.txt.textContent = (pct||0) + "%";
  };
}

/* ===== –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ===== */
const statusEl = document.getElementById('status');
let translateRUEN, generator, translateENRU, sentiment;

async function loadAll(){
  try {
    translateRUEN = await pipeline("translation","Xenova/opus-mt-ru-en",{ progress_callback:onProgress("ruen") });
    generator     = await pipeline("text-generation","Xenova/distilgpt2",{ progress_callback:onProgress("gen") });
    translateENRU = await pipeline("translation","Xenova/opus-mt-en-ru",{ progress_callback:onProgress("enru") });
    sentiment     = await pipeline("sentiment-analysis","Xenova/distilbert-base-uncased-finetuned-sst-2-english",{ progress_callback:onProgress("sent") });
  } catch (e) { logErr(e); }
}
await loadAll();

/* ===== –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–∞ ===== */
const img = new Image();
img.src = SPRITE_SRC;
img.addEventListener('error', ()=> logErr("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–π—Ç: " + SPRITE_SRC));
await img.decode().catch(()=>{/* –æ—Å—Ç–∞–Ω–µ—Ç—Å—è fallback */});

/* ===== –ê–Ω–∏–º–∞—Ü–∏—è ===== */
let state="idle", frameIdx=0, last=0, fps=8;
function drawFrame(i){
  const sx=(i%COLS)*FRAME, sy=Math.floor(i/COLS)*FRAME;
  ctx.clearRect(0,0,FRAME,FRAME);
  if (img.complete && img.naturalWidth) {
    ctx.drawImage(img,sx,sy,FRAME,FRAME,0,0,FRAME,FRAME);
  } else { drawFallback(); }
}
function loop(ts){
  const seq=animations[state]||animations.idle;
  if (ts-last>1000/fps){ frameIdx=(frameIdx+1)%seq.length; drawFrame(seq[frameIdx]); last=ts; }
  requestAnimationFrame(loop);
}
drawFrame(animations[state][0]);
requestAnimationFrame(loop);

/* ===== –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ ===== */
document.getElementById('loader').classList.add('hide');
statusEl.textContent="–ì–æ—Ç–æ–≤! –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π –ø–æ-—Ä—É—Å—Å–∫–∏ üê£";

/* ===== –ß–∞—Ç ===== */
const log = document.getElementById('log'), q=document.getElementById('q'), sendBtn=document.getElementById('send');
function addMsg(text,who="ai"){ const d=document.createElement('div'); d.className=`msg ${who}`; d.textContent=text; log.appendChild(d); log.scrollTop=log.scrollHeight; }

async function reply(userText){
  try{
    state="talk"; sendBtn.disabled=true; statusEl.textContent="–î—É–º–∞—é‚Ä¶";
    addMsg(userText,"me");

    // 1) –ü–µ—Ä–µ–≤–æ–¥ RU -> EN
    let enPrompt = userText;
    try { enPrompt = (await translateRUEN(userText))[0].translation_text || enPrompt; } catch(e){ logErr(e); }

    // 2) –°–µ–Ω—Ç–∏–º–µ–Ω—Ç –ø–æ –∞–Ω–≥–ª. —Ç–µ–∫—Å—Ç—É
    let mood="NEUTRAL";
    try {
      const s = await sentiment(enPrompt);
      mood = s[0]?.label || "NEUTRAL"; // POSITIVE/NEGATIVE
    } catch(e){ logErr(e); }

    // 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂)
    const persona = "You are Cheepy, a cute cartoon zombie chick. Answer briefly (1 short sentence).";
    const prompt  = `${persona}\nHuman: ${enPrompt}\nCheepy:`;
    let enAnswer="";
    try {
      const out = await generator(prompt,{ max_new_tokens:50, temperature:0.9, top_p:0.92 });
      enAnswer = (out[0].generated_text||"").replace(prompt,"").trim();
    } catch(e){ logErr(e); enAnswer="(I chirp silently)"; }

    // 4) –ü–µ—Ä–µ–≤–æ–¥ EN -> RU
    let ruAnswer = enAnswer;
    try { ruAnswer = (await translateENRU(enAnswer))[0].translation_text || ruAnswer; } catch(e){ logErr(e); }

    // 5) –í–∏–∑—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
    state = (mood==="POSITIVE") ? "happy" : (mood==="NEGATIVE") ? "angry" : "idle";

    addMsg("üê£ "+ruAnswer,"ai");
    statusEl.textContent="–ì–æ—Ç–æ–≤!";
  } catch(e){ logErr(e); statusEl.textContent="–û—à–∏–±–∫–∞"; }
  finally{ sendBtn.disabled=false; }
}

document.getElementById('chat').addEventListener('submit',e=>{
  e.preventDefault(); const text=q.value.trim(); if(!text) return; q.value=""; reply(text);
});
document.querySelectorAll('[data-act]').forEach(b=> b.addEventListener('click',()=> state=b.dataset.act));
</script>
</body>
</html>
